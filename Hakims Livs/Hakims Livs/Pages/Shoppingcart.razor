@inject Data.ApplicationDbContext context
@inject UserManager<Customer> UserManager
@using Microsoft.AspNetCore.Identity
@using Hakims_Livs.Models
@using Hakims_Livs.Services
@inject IUser _user
@inject ICart _cart
@inject NavigationManager Navigation
@page "/shoppingcart"

<h1>Kundvagnen</h1>

<AuthorizeView>
    <Authorized>
        <h5>Hej, @context.User.Identity?.Name</h5>
    <div class="productcontainer">
        @foreach (var product in ProductList)
            {
                <div class="productdiv">
                    <div class ="onclick">
                    <img class ="productimage "src= "@product.Image" />
                    <div class ="productname">@product.Name</div>
                    <div class ="productdescription">@product.Description</div>
                    <div class ="productprice">@product.Price kr</div>
                    </div>
                    <button disabled=@IsTaskRunning @onclick="() => RemoveProduct(product)" class="cartbutton">Ta bort</button>
                </div>
            }
        </div>
    </Authorized>
</AuthorizeView>

@code {
    public List<ShoppingCart> ShoppingList = new List<ShoppingCart>();
    public List<Product> ProductList = new List<Product>();
    private Customer currentCustomer { get; set; }
    bool IsTaskRunning = false;

    Task DisableButtonOnClick()
    {       
        return Task.Delay(100);
    }

    //Gets the current users shoppinglist and saves it to ProductList which we then use to display items in ShoppingCart
    protected override async Task OnParametersSetAsync()
    {
        currentCustomer = await _user.GetCurrentUserAsync();

        ShoppingList = new List<ShoppingCart>();

        if (currentCustomer != null)
        {
            ShoppingList = context.ShoppingCarts.Where(s => s.UserId == currentCustomer.Id).ToList();

            ProductList = new List<Product>();
            foreach (var productId in ShoppingList)
            {
                var thisProduct = context.Products.First(p => p.ID == productId.ProductId);
                ProductList.Add(thisProduct);
            }
        }
    }

    public async Task RemoveProduct(Product product)
    {
        IsTaskRunning = true;
        await DisableButtonOnClick();
        await _cart.RemoveProduct(product);
        await OnParametersSetAsync();
        Navigation.NavigateTo(Navigation.Uri, forceLoad: true);
    }
}
