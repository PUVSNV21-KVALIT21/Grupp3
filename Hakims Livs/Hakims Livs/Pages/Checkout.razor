@inject IJSRuntime IJS
@inject IUser _user
@inject ICart _cart
@inject IOrder _order

@page "/checkout"

<h1>Kassan</h1>
<AuthorizeView>
    <Authorized>
        <h5>Hej, @context.User.Identity?.Name</h5>
        <table class="table">
            <thead>
                <tr>
                    <th scope="col"></th>

                    <th scope="col">Produkt</th>
                    <th scope="col">Antal</th>
                    <th scope="col">Pris/styck</th>
                    <th scope="col">Totalt</th>
                </tr>
            </thead>
            @foreach (var product in ProductList)
            {
                <tbody>
                    <tr>
                        <th scope="row"></th>
                        <td>@product.Name</td>
                        <td>1</td>
                        <td>@product.Price kr</td>
                        <td>@product.Price kr</td>
                    </tr>
                </tbody>
            }
            <tfoot>
                <tr>
                    <th scope="row"></th>
                    <td></td>
                    <td></td>
                    <th>Summa att betala:</th>
                    <td>@totalCart kr</td>
                </tr>
            </tfoot>
        </table>
        <p></p>

        @if(totalCart>0)
        {
            <p style="font-weight:bold">Fakturan skickas med i ordern</p>
            <button @onclick="CheckOut">Betala och se din faktura</button>
        }
        else
        {
            <p style="font-weight:bold">Du har ingenting i kassan att betala</p>
        }
    </Authorized>
</AuthorizeView>



@code {
    public List<ShoppingCart> ShoppingList = new List<ShoppingCart>();
    public List<Product> ProductList = new List<Product>();
    private Customer currentCustomer { get; set; }
    public double totalCart;

    //Gets the current users shoppinglist and saves it to ProductList which we then use to display items in checkout
    protected override async Task OnParametersSetAsync()
    {
        currentCustomer = await _user.GetCurrentUserAsync();
        totalCart = await _cart.UpdateCartPrice();
        ShoppingList = new List<ShoppingCart>();

        if (currentCustomer != null)
        {
            //Creates a list with all shoppinglists where the user id matches the loged in user id
            ShoppingList = context.ShoppingCarts.Where(s => s.UserId == currentCustomer.Id).ToList();

            ProductList = new List<Product>();
            foreach (var productId in ShoppingList)
            {
                var thisProduct = context.Products.First(p => p.ID == productId.ProductId);
                ProductList.Add(thisProduct);
            }
        }
    }
    public async Task CheckOut()
    {
        await _order.CreateOrder();
        await PrintDocument();
    }

    //Creates a new page where you can print out the invoice
    public async Task PrintDocument() => await IJS.InvokeAsync<object>("open", new object[] { "/invoice" });

}
