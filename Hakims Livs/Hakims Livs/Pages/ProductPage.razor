@page "/product"
@page "/product/{id:int}"
@using Microsoft.AspNetCore.Identity
@using Microsoft.AspNetCore.Mvc
@using Microsoft.AspNetCore.Mvc.Rendering
@using System.Security.Claims
@using Microsoft.AspNetCore.Components.Authorization
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject Data.ApplicationDbContext context
@inject UserManager<Customer> UserManager
@inject SignInManager<Customer> SignInManager
@inject NavigationManager Navigation
@using Hakims_Livs.Models
@using Hakims_Livs.Pages
@using System.Globalization
@inject IShowModal _showModal
@inject IUser _user
@inject ICart _cart



<PageTitle> Produkter </PageTitle>
    <select @onchange="ChangeSorting">
          
    @foreach (var option in options)
        {
            <option value=@option>@option</option>
        }
    </select>
    <div class="productcontainer">
        @foreach (var product in ProductList)
            {
                <div class="productdiv">
                    <div class ="onclick" @onclick="@(() => ShowProduct(product.ID))">
                    <img class ="productimage "src= "@product.Image" />
                    <div class ="productname">@product.Name</div>
                    <div class ="productdescription">@product.Description</div>
                    <div class ="productprice">@product.Price kr</div>
                    </div>
                    <button disabled=@IsTaskRunning @onclick="() => AddProductToShoppingCart(product)" class="cartbutton">Lägg till i varukorg</button>
                </div>
            }
        </div>
 
@code {

    [Parameter]
    public int? id { get; set; }
    public List<Product> ProductList { get; set; }
    public List<string> options = new List<string>();
    private string username;
    public string SelectedString { get; set; }
    private Customer currentCustomer { get; set; }
    bool IsTaskRunning = false;

    //Sorting field for products
    protected override void OnParametersSet()
    {
        options = new List<string>() { "Name", "Price"};
        SelectedString = "Name";
        Thread.CurrentThread.CurrentUICulture = new CultureInfo("se");
        var query = context.Products.Where(x => x.CategoryName.ID == id).AsNoTracking().OrderBy(x => x.Name);
        ProductList = new List<Product>();
        ProductList = query.ToList();
    }
    void ShowProduct (int productId)
    {
        _showModal.DisplayModal(productId);
    }
    public async Task ChangeSorting(ChangeEventArgs e)
    {
        SelectedString = e.Value.ToString();
        var query = context.Products.Where(x => x.CategoryName.ID == id).AsNoTracking();
        if (SelectedString == "Name")
        {
            query = query
            .OrderBy(x => x.Name);
        }
        if (SelectedString == "Price")
        {
            query = query
            .OrderBy(x => x.Price);
        }
        ProductList = new List<Product>();
        ProductList = await query.ToListAsync();
    }

      Task DisableButtonOnClick()
    {       
        return Task.Delay(100);
    }

    public async Task AddProductToShoppingCart(Product product)
    {
        currentCustomer = await _user.GetCurrentUserAsync();
        IsTaskRunning = true;
        await DisableButtonOnClick();
        if (currentCustomer != null)
        {
            await _cart.AddProductToShoppingCart(product);
            Navigation.NavigateTo(Navigation.Uri, forceLoad: true);
        }
        else
        {
            Navigation.NavigateTo("/Identity/Account/Login", forceLoad: true);
        }
    }
}
