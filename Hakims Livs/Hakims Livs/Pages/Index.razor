@inject Data.ApplicationDbContext context
@page "/"
@using Hakims_Livs.Data
@using Hakims_Livs.Models
@using Microsoft.AspNetCore.Identity
@inject ApplicationDbContext _context
@inject IAdmin _admin
@inject IShowModal _showModal
@inject IUser _user
@inject ICart _cart
@inject NavigationManager Navigation
@inject UserManager<Customer> UserManager
@inject RoleManager<IdentityRole> _RoleManager
@inject AuthenticationStateProvider AuthenticationStateProvider
 
<PageTitle>Index</PageTitle>

<h1 style="text-align:center">Välkommen till Hakim Livs</h1>

<h2 style="text-align:center">Dagens Produkter</h2>

    <div class="productcontainer">
        @foreach (var product in products)
            {
                <div class="productdiv">
                    <div class ="onclick" @onclick="@(() => ShowProduct(product.ID))">
                    <img class ="productimage "src= "@product.Image" />
                    <div class ="productname">@product.Name</div>
                    <div class ="productdescription">@product.Description</div>
                    <div class ="productprice">@product.Price kr</div>
                    </div>
                    <button @onclick="() => AddProductToShoppingCart(product)" class="cartbutton">Lägg till i varukorg</button>
                </div>
            }
        </div>

@code {
    public Guid guid {get; set; }
    public Category category { get; set; }
    public List<Product> products { get; set; }
    public Customer currentCustomer { get; set; }

    protected override Task OnInitializedAsync()
    {
        LoadCsvFile(context);
                if (context.Customers.Where(cu => cu.Email == "admin1@example.com").Count() < 1)
        {
            var adminRole = new Microsoft.AspNetCore.Identity.IdentityRole("Admin");
            context.Roles.AddAsync(adminRole);
            context.SaveChangesAsync();
            var adminEmail = "admin1@example.com";
            var admin = new Customer()
                {
                    UserName = adminEmail,
                    Email = adminEmail,
                    EmailConfirmed = true,
                    FirstName = "Admin",
                    LastName = "Admin",
                    Age = 30,
                    City = "stockholm",
                    Address = "en bra gata",
                    PostalCode = "12344"
                };
            context.Customers.Add(admin);
            UserManager.CreateAsync(admin, "Test123!");

            var addrole = new Microsoft.AspNetCore.Identity.IdentityUserRole<string>()
                {
                    RoleId = adminRole.Id,
                    UserId = admin.Id
                };
            context.UserRoles.AddAsync(addrole);
            context.SaveChangesAsync();
        }
        products = new List<Product>();
        products = _context.Products.OrderBy(x => Guid.NewGuid()).Take(12).ToList();
        return base.OnInitializedAsync();
    }
        void ShowProduct (int productId)
    {
        _showModal.DisplayModal(productId);
    }    
    public async Task AddProductToShoppingCart(Product product)
    {
        currentCustomer = await _user.GetCurrentUserAsync();

        if (currentCustomer != null)
        {
            await _cart.AddProductToShoppingCart(product);
            Navigation.NavigateTo(Navigation.Uri, forceLoad: true);
        }
        else
        {
            Navigation.NavigateTo("/Identity/Account/Login", forceLoad: true);
        }
    }

    public static async Task LoadCsvFile(ApplicationDbContext context)
    {
        if (!context.Products.Any())
        {
            var nameList = new List<string>();
            var catList = new List<string>();
            var codeList = new List<string>();
            var desList = new List<string>();
            var imgList = new List<string>();
            var priceList = new List<double>();

            string[] csvLines = System.IO.File.ReadAllLines(@"ExampleData.csv");
            string[] testLines = System.IO.File.ReadAllLines(@"Categories.csv");

            for (int i = 0; i < csvLines.Length; i++)
            {
                string[] rowData = csvLines[i].Split('|');

                nameList.Add(rowData[0]);
                catList.Add(rowData[1]);
                codeList.Add(rowData[2]);
                desList.Add(rowData[3]);
                imgList.Add(rowData[4]);

                double prices = Convert.ToDouble(rowData[5]);
                priceList.Add(prices);
            }

            for(int i = 0; i < testLines.Length; i++)
            {
                Category category = new Category                
                 {
                    Name = testLines[i]
                  };
                context.Categories.Add(category);
                context.SaveChanges();
            }

            for (int i = 0; i < csvLines.Length; i++)
            {               
                var product = new Product
                    {
                        Name = nameList[i],
                        CategoryName = context.Categories.Where(c => c.Name == catList[i]).FirstOrDefault(), 
                        ProductCode = codeList[i],
                        Description = desList[i],
                        Image = imgList[i],
                        Price = priceList[i]
                    };
                context.Products.Add(product);
                context.SaveChanges();
            }
        }

    }
    }

