@page "/admin"
@using Microsoft.AspNetCore.Authorization;
@using Microsoft.AspNetCore.Identity;
@inject UserManager<Customer> UserManager
@inject RoleManager<IdentityRole> _RoleManager
@inject AuthenticationStateProvider AuthenticationStateProvider
<h3>Administration</h3>
<AuthorizeView>
    <Authorized>
    
    </Authorized>
 </AuthorizeView>

@code {
    [CascadingParameter]
    private Task<AuthenticationState> authenticationStateTask { get; set; }
    string AdminRole = "Admin";
    System.Security.Claims.ClaimsPrincipal CurrentUser;

    protected override async Task OnInitializedAsync()
    {
        if (context.Customers.Where(cu => cu.Email == "admin1@example.com").Count() < 1)
        {
            var adminRole = new Microsoft.AspNetCore.Identity.IdentityRole("Admin");
            await context.Roles.AddAsync(adminRole);
            await context.SaveChangesAsync();
            var adminEmail = "admin1@example.com";
            var admin = new Customer()
                {
                    UserName = adminEmail,
                    Email = adminEmail,
                    EmailConfirmed = true,
                    FirstName = "Admin",
                    LastName = "Admin",
                    Age = 30,
                    City = "stockholm",
                    Address = "en bra gata",
                    PostalCode = "12344"
                };
            context.Customers.Add(admin);
            await UserManager.CreateAsync(admin, "Test123!");

            var addrole = new Microsoft.AspNetCore.Identity.IdentityUserRole<string>()
                {
                    RoleId = adminRole.Id,
                    UserId = admin.Id
                };
            await context.UserRoles.AddAsync(addrole);
            await context.SaveChangesAsync();
        }

    }
}