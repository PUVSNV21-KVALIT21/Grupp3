@page "/admin"
@using Microsoft.AspNetCore.Mvc
@using Microsoft.AspNetCore.Identity
@using Hakims_Livs.Models
@using Hakims_Livs.Services
@inject IAdmin _admin
@inject IModalService _modal
@inject ApplicationDbContext _context
@inject NavigationManager NavigationManager
@inject UserManager<Customer> UserManager
@inject RoleManager<IdentityRole> _RoleManager
@inject AuthenticationStateProvider AuthenticationStateProvider

<AuthorizeView Roles="Admin">
    <Authorized>
<div style="text-align: center; padding: 30px;">
<h3>Admin</h3>
<h3>Total Products: @TotalProducts</h3>
<button class="create" @onclick="CreateProduct" style="margin: 10px;">Skapa Produkt</button>
<button class="create" @onclick="CreateCategory" style="margin: 10px;">Skapa Kategori</button>
</div>
   <h3 style="text-align: center; padding-bottom: 20px;">Produkter</h3>
    <div class="productcontainer">
        @foreach (var product in products)
            {
                <div class="productdiv">
                    <div class ="onclick">
                    <img class ="productimage "src= "@product.Image" />
                    <div class ="productname">@product.Name</div>
                    <div class ="productdescription">@product.Description</div>
                    <div class ="productprice">@product.Price kr</div>
                    </div>
                    <button disabled=@IsTaskRunning @onclick="() => RemoveProduct(product)" class="cartbutton">Ta Bort</button>
                </div>
            }
    </div>
    <h3 style="text-align: center; padding: 30px;">Kategorier</h3>
    <div class="productcontainer">
        @foreach (var category in categories)
        {
            <div class="productdiv">
                <div>@category.Name</div>
                <button disabled=@IsTaskRunning @onclick="() => RemoveCategory(category)" class="cartbutton">Ta Bort</button>
            </div>
        }
    </div>
        </Authorized>
 </AuthorizeView>
@code {
    [Parameter]
    public Product product { get; set; }
    public List<Product> products { get; set; }
    public int TotalProducts { get; set; }
    public List<Category> categories { get; set; }
    [CascadingParameter]
    private Task<AuthenticationState> authenticationStateTask { get; set; }
    string AdminRole = "Admin";
    System.Security.Claims.ClaimsPrincipal CurrentUser;
    bool IsTaskRunning = false;

    protected override void OnParametersSet()
    {
        products = new List<Product>();
        categories = new List<Category>();
        products = _context.Products.AsNoTracking().OrderBy(x => x.Name).ToList();
        categories = _context.Categories.AsNoTracking().OrderBy(x => x.Name).ToList();
        TotalProducts = _context.Products.Count();
    }

    //Creates admin account on init
    protected override async Task OnInitializedAsync()
    {
        if (context.Customers.Where(cu => cu.Email == "admin1@example.com").Count() < 1)
        {
            var adminRole = new Microsoft.AspNetCore.Identity.IdentityRole("Admin");
            await context.Roles.AddAsync(adminRole);
            await context.SaveChangesAsync();
            var adminEmail = "admin1@example.com";
            var admin = new Customer()
                {
                    UserName = adminEmail,
                    Email = adminEmail,
                    EmailConfirmed = true,
                    FirstName = "Admin",
                    LastName = "Admin",
                    Age = 30,
                    City = "stockholm",
                    Address = "en bra gata",
                    PostalCode = "12344"
                };
            context.Customers.Add(admin);
            await UserManager.CreateAsync(admin, "Test123!");

            var addrole = new Microsoft.AspNetCore.Identity.IdentityUserRole<string>()
                {
                    RoleId = adminRole.Id,
                    UserId = admin.Id
                };
            await context.UserRoles.AddAsync(addrole);
            await context.SaveChangesAsync();
        }

    }
    public async Task CreateProduct()
    {
        NavigationManager.NavigateTo("/createproduct", forceLoad: true);
    }
    public async Task CreateCategory()
    {
        NavigationManager.NavigateTo("/createcategory", forceLoad: true);
    }
    public async Task RemoveProduct(Product product)
    {
        IsTaskRunning = true;
        await DisableButtonOnClick();
        await _admin.DeleteProduct(product);
        await OnParametersSetAsync();
        NavigationManager.NavigateTo(NavigationManager.Uri, forceLoad: true);
    }
    public async Task RemoveCategory(Category category)
    {
        IsTaskRunning = true;
        var categoryProducts = new List<Product>();

        categoryProducts =_context.Products.AsNoTracking().Where(p=>p.CategoryName==category).ToList();

        foreach(var product in categoryProducts)
        {

            await _admin.DeleteProduct(product);

        }
        await DisableButtonOnClick();
        await _admin.DeleteCategory(category);
        await OnParametersSetAsync();
        NavigationManager.NavigateTo(NavigationManager.Uri, forceLoad: true);
    }

    //Method to disable buttons to prevent site crashing from slow server response
    Task DisableButtonOnClick()
    {       
        return Task.Delay(100);
    }
}
