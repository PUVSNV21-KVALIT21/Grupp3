@page "/orders"
@inject IJSRuntime IJS

@inject IUser _user
@inject ICart _cart
@inject NavigationManager Navigation
<AuthorizeView Roles="Admin">
    <Authorized>
        

<h1 style=text-decoration:underline>Beställningar</h1> <button @onclick="PrintOrders">Skriv ut alla beställningar</button>

<table class="table">
    <thead>
        <tr>
            <th scope="col"><h2>Kund</h2></th>
            <th scope="col"><h2>Produkter</h2></th>
            <th scope="col"><h2>Klar / Ej klar</h2></th>

        </tr>
    </thead>
    @foreach (var customer in CustomerList.OrderBy(c => c.FullName))
    {
        ProductList = new List<Product>();

        @foreach (var product in ShoppingList)
        {
            if (product.User == customer)
            {
                ProductList.Add(product.Product);
            }
        }
        <tbody>
            <tr>
                <td style ="font-weight:bold">@customer.FullName</td>
                <td></td>
                <label> Klicka här när beställningen är färdigplockad
                <td><input type="checkbox" class="larger" @onclick="() => ClearCart(customer)"></td>
                <style>
                    input.larger
                    {
                        width: 30px;
                        height: 30px;
                    }
                </style>
                </label>
            </tr>

            @foreach (var item in ProductList)
            {
                <tr>
                    <td></td>
                    <td>@item.Name</td>                 
                </tr>
            }
            <tr>
                <td></td>

                <td>
                    <NavLink href=@($"printorder/{customer.Id}")>
                        <button>Se Detaljerad order</button>
                    </NavLink>

                </td>
            </tr>

        </tbody>
    }

</table>

        </Authorized>
 </AuthorizeView>
@code {

    bool isChecked = false;

    public List<ShoppingCart> ShoppingList = new List<ShoppingCart>();

    public List<Product> ProductList = new List<Product>();
    public List<Customer> CustomerList = new List<Customer>();

    public async Task PrintOrders() => await IJS.InvokeAsync<object>("open", new object[] { "/AdminOrderlist" });

    protected override async Task OnParametersSetAsync()
    {

        ShoppingList = new List<ShoppingCart>();
        CustomerList = new List<Customer>();
        ProductList = new List<Product>();

        ShoppingList = context.ShoppingCarts.OrderBy(s => s.User).ToList();
        CustomerList = context.ShoppingCarts.Select(x => x.User).ToList();

    }

    public async Task ClearCart(Customer customer)
    {
        ShoppingList = new List<ShoppingCart>();
        ShoppingList = context.ShoppingCarts.Where(x => x.UserId == customer.Id).ToList();
        foreach (var product in ShoppingList)
        {
            context.ShoppingCarts.Remove(product);
        }
        await context.SaveChangesAsync();
        Navigation.NavigateTo(Navigation.Uri, forceLoad: true);
    }

    }