@page "/completedorders"
@inject IJSRuntime IJS

@inject IUser _user
@inject ICart _cart
@inject IOrder _order
@inject NavigationManager Navigation
<AuthorizeView Roles="Admin">
    <Authorized>
        

<h1 style=text-decoration:underline>Färdiga Beställningar</h1> <button @onclick="PrintOrders">Skriv ut färdiga beställningar</button>
<button @onclick="Navigate">Visa pågående beställningar</button>

<table class="table">
    <thead>
        <tr>
            <th scope="col"><h2>Kund</h2></th>
            <th scope="col"><h2>Produkter</h2></th>
        </tr>
    </thead>
        @foreach (var item in OrderList)
    {
        ProductList = new List<Product>();
        ProductList = item.Products;
        <tbody>
            <tr>
                <td style ="font-weight:bold">@item.User.FullName</td>
                <td></td>
            </tr>

            @foreach (var product1 in ProductList)
            {
                for (var i = 0; i < product1.Quantity.Amount; i++)
                {
                <tr>
                    <td></td>
                    <td>@product1.Name</td>                 
                </tr>   
                }

            }
            <tr>
                <td></td>

                <td>
                    <NavLink href=@($"printorder/{item.Id}")>
                        <button>Se Detaljerad order</button>
                    </NavLink>

                </td>
            </tr>

        </tbody>
    }

</table>

        </Authorized>
 </AuthorizeView>
@code {

    bool isChecked = false;

    public List<ShoppingCart> ShoppingList = new List<ShoppingCart>();
    public List<Order> OrderList = new List<Order>();

    public List<Product> ProductList = new List<Product>();
    public List<Customer> CustomerList = new List<Customer>();

    public async Task PrintOrders() => await IJS.InvokeAsync<object>("open", new object[] { "/orderhistory" });

    protected override async Task OnParametersSetAsync()
    {
        ProductList = new List<Product>();
        OrderList = new List<Order>();
        OrderList = context.Orders.Include(p => p.Products).ThenInclude(x => x.Quantity).Include(x => x.User).OrderBy(x => x.User).Where(x => x.IsDone == true).ToList();
    }

    public async Task SetToDone(int id)
    {
        await _order.UpdateOrder(id);
        Navigation.NavigateTo(Navigation.Uri, forceLoad: true);
    }
    public async Task Navigate()
    {
        Navigation.NavigateTo("orders", forceLoad: true);
    }
}
